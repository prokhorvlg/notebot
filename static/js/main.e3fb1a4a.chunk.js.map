{"version":3,"sources":["utils/firebase.js","utils/databaseCalls.js","components/Category.js","Main.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","userKey","a","firestore","collection","doc","get","then","exists","console","log","data","catch","error","add","title","categories","notes","docRef","id","color","body","Category","category","changeCategory","deleteCategory","selectCategory","categoryRef","useRef","useEffect","editMode","current","focus","selectedClass","selected","ref","placeholder","onInput","e","name","target","value","handleEdit","onKeyDown","key","blur","handleKeyDown","onBlur","handleExit","class","href","onClick","Main","useState","userId","setUserId","selectedCategory","setSelectedCategory","setCategories","React","created","modified","contents","categoryAllRef","searchString","retrieveLocalUser","Object","keys","length","databaseCalls","loadUser","createUser","newUserId","storeLocalUser","selectedClassAll","notebotUserStore","localStorage","setItem","JSON","stringify","parse","getItem","findPositionInArray","arrayOfObjects","map","object","indexOf","createEmptyCategory","newId","parseInt","emptyCategory","newProperties","originalCategory","find","findObjectInArray","newCategory","assign","newCategories","categoryPosition","splice","className","preventDefault","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3fb1a4a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDdCjbP7lQVb7--7uraYnkEdLGjWTmWckE\",\r\n  authDomain: \"notebot-42.firebaseapp.com\",\r\n  databaseURL: \"https://notebot-42.firebaseio.com\",\r\n  projectId: \"notebot-42\",\r\n  storageBucket: \"notebot-42.appspot.com\",\r\n  messagingSenderId: \"884273569921\",\r\n  appId: \"1:884273569921:web:e56bf1258d353e4ae02d80\",\r\n  measurementId: \"G-7B4K7B82XL\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics();\r\n\r\nexport default firebase;\r\n","import firebase from \"./firebase\";\r\n\r\n// databaseCalls: interface for calls to Firebase\r\n\r\n// ENDPOINTS\r\n\r\n/*\r\n\r\naddCategory\r\nremoveCategory\r\neditCategory\r\n\r\naddNote\r\nremoveNote\r\neditNote\r\n\r\n*/\r\n\r\nexport class databaseCalls {\r\n\r\n  async loadUser(userKey) {\r\n    firebase.firestore().collection(\"users\").doc(userKey).get().then((doc) => {\r\n        if (doc.exists) {\r\n            console.log(\"Document data:\", doc.data());\r\n        } else {\r\n            // doc.data() will be undefined in this case\r\n            console.log(\"No such document!\");\r\n        }\r\n    }).catch((error) => {\r\n        console.log(\"Error getting document:\", error);\r\n    });\r\n  }\r\n\r\n  async createUser() {\r\n    return firebase.firestore()\r\n      .collection(\"users\")\r\n      .add({\r\n        title: \"user\",\r\n        categories: [],\r\n        notes: []\r\n      }).then(function(docRef) {\r\n          return docRef.id;\r\n      });\r\n  }\r\n\r\n  createCategory(userKey) {\r\n    firebase.firestore()\r\n      .collection(\"users\").doc(userKey)\r\n      .collection(\"categories\")\r\n      .add({\r\n        title: \"category\",\r\n        color: \"#0f0\",\r\n      }).then(function(docRef) {\r\n          return docRef.id;\r\n      });\r\n\r\n\r\n    firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .add({\r\n      title: \"New Category\",\r\n      body: \"This is to check the Integration is working\"\r\n    });\r\n  }\r\n}\r\n\r\nexport default new databaseCalls();\r\n","import React, { useRef, useEffect } from 'react';\r\n\r\nconst Category = ({category, changeCategory, deleteCategory, selectCategory}) => {\r\n\r\n  // Make sure that the input element is focused when the category is in edit mode.\r\n  const categoryRef = useRef(null);\r\n  useEffect(() => {\r\n    if (category.editMode) {\r\n      categoryRef.current.focus();\r\n    }\r\n  }, [category.editMode]);\r\n\r\n  // Handle any events that occur in edit mode.\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.target.blur();\r\n    }\r\n  }\r\n  const handleExit = (e) => {\r\n    // If the input is empty, delete the Category.\r\n    if (e.target.value === \"\") {\r\n      deleteCategory(category.id);\r\n    } else {\r\n      // If input is not empty, update the Category state.\r\n      changeCategory(category.id, { name: e.target.value, editMode: false });\r\n      // Select the newly edited category.\r\n      selectCategory(category.id);\r\n    }\r\n  }\r\n  const handleEdit = (e) => {\r\n    changeCategory(category.id, { name: e.target.value });\r\n  }\r\n\r\n  // Handle any events that occur in normal mode (as an anchor).\r\n  const handleClick = (e) => {\r\n    selectCategory(category.id);\r\n  }\r\n\r\n  // Append a selected class if this category is selected.\r\n  let selectedClass;\r\n  if (category.selected) {\r\n    selectedClass = \" selected\";\r\n  } else {\r\n    selectedClass = \"\";\r\n  }\r\n\r\n  if (category.editMode) {\r\n    return (\r\n      <li>\r\n        <input\r\n          id={\"category-\" + category.id}\r\n          ref={categoryRef}\r\n          placeholder=\"Enter a category title.\"\r\n          onInput={(e) => handleEdit(e)}\r\n          onKeyDown={(e) => handleKeyDown(e)}\r\n          onBlur={(e) => handleExit(e)}\r\n          value={category.name}\r\n          />\r\n      </li>\r\n    );\r\n  } else {\r\n    return (\r\n      <li>\r\n        <a\r\n          id={\"category-\" + category.id}\r\n          ref={categoryRef}\r\n          class={selectedClass}\r\n          href=\"#\"\r\n          onClick={(e) => handleClick(e)}>\r\n            {category.name}\r\n        </a>\r\n      </li>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default Category;\r\n","import React, { useState, createRef, useRef } from 'react';\n\n// Extensions\nimport { EditText, EditTextarea } from 'react-edit-text';\nimport 'react-edit-text/dist/index.css';\n\n// My utilities\nimport firebase from \"./utils/firebase\";\nimport databaseCalls from \"./utils/databaseCalls\";\n\n// My components\nimport Category from './components/Category';\nimport Note from './components/Note';\n\n// MAIN APPLICATION\nconst Main = () => {\n\n  // * STATE\n  // Since this is a relatively simple app, all of the state is stored here.\n\n  // Stores the id of the user.\n  const [userId, setUserId] = useState(null);\n\n  // Stores the currently selected category that is highlighted and who's notes are being displayed.\n  const [selectedCategory, setSelectedCategory] = useState(-1);\n  // Stores the categories associated with the user.\n  const [categories, setCategories] = useState(\n    [\n      {\n        id: 0,\n        name: 'Personal',\n        color: 'green',\n        editMode: false,\n        selected: false\n      }\n    ]\n  );\n  React.useEffect(() => {\n    // Filter the displayed notes to only those within the selected Category.\n    // If the selected note is not \"all\"...\n    if (selectedCategory !== -1) {\n      // Filter logic\n    }\n\n    // Submit the change to Firebase.\n  }, [categories]);\n\n  // Stores the currently selected note that is being edited in the main panel.\n  const [selectedNote, setSelectedNote] = useState(null);\n  // Stores the notes associated with the user.\n  const [notes, setNotes] = useState(\n    [\n      {\n        id: 0,\n        title: 'Title of a note',\n        category: 0,\n        created: 'Date',\n        modified: 'Date',\n        contents: 'Contents of a note.'\n      },\n    ]\n  );\n  // Stores the ref to the all category which is not a true category and cannot be deleted.\n  const categoryAllRef = useRef(null);\n\n  const [searchString, setSearchString] = useState(\"\");\n  React.useEffect(() => {\n    // Filter the\n  }, [searchString]);\n\n  // * EFFECTS\n\n  // Initializion for the app.\n  // This loads the user data or creates a new one if they do not exist.\n  React.useEffect(() => {\n    // Try to retrieve the user from localStorage, if it exists.\n    let userId = retrieveLocalUser();\n    if (userId && Object.keys(userId).length !== 0) {\n      // If user exists, then make a call to get the user's notes.\n      databaseCalls.loadUser(userId.userId);\n      // Save the user in the state.\n      setUserId(userId.userId);\n    } else {\n      // If user does not exist, then make a call to create the user on Firebase.\n      databaseCalls.createUser().then((newUserId) => {\n        // Save the new user in the state.\n        setUserId(newUserId);\n        // Save the user Id in localStorage.\n        storeLocalUser();\n      });\n    }\n  }, []);\n\n  React.useEffect(() => {\n    console.log(categories);\n  });\n\n  // * FUNCTIONS\n\n  // ** LOCAL STORAGE\n  // Store and retrieve the user id from local storage, if the user refreshes the page.\n  const storeLocalUser = () => {\n    const notebotUserStore = userId;\n    localStorage.setItem('notebotUserStore', JSON.stringify(notebotUserStore));\n  }\n  const retrieveLocalUser = () => {\n    const notebotUserStore = JSON.parse(localStorage.getItem('notebotUserStore'));\n    return notebotUserStore;\n  }\n\n  // ** UTILS\n  // Generates a new id number based on the last value found in the array plus one.\n  const generateId = (arrayOfObjects) => {\n    if (arrayOfObjects.length > 0) {\n      return parseInt(arrayOfObjects[arrayOfObjects.length - 1].id) + 1;\n    } else {\n      return 0;\n    }\n  }\n  // Finds the object with the given id within the array.\n  const findObjectInArray = (id, arrayOfObjects) => {\n    return arrayOfObjects.find(object => object.id === id);\n  }\n  // Finds the position of the object with the given id within the array.\n  const findPositionInArray = (id, arrayOfObjects) => {\n    return arrayOfObjects.map(function(object) {return object.id; }).indexOf(id);\n  }\n\n  // ** CATEGORIES\n\n  // Create a new empty category (a bucket for notes).\n  const createEmptyCategory = () => {\n    let newId = generateId(categories);\n    let emptyCategory = {\n      id: newId,\n      name: '',\n      color: '',\n      editMode: true,\n      selected: false\n    };\n    setCategories(categories  => [...categories, emptyCategory]);\n    return newId;\n  }\n  // Trigger the process to add a new category.\n  const addCategory = () => {\n    const categoryId = createEmptyCategory();\n  }\n\n  // Change category to the details provided in the input object.\n  // Expect input object to look like { key: newValue, ... }\n  const changeCategory = (id, newProperties) => {\n    console.log(id, newProperties)\n    // Find the object with the relevant id.\n    let originalCategory = findObjectInArray(id, categories);\n    // Replace any values within it with the submitted properties.\n    let newCategory = Object.assign(originalCategory, newProperties);\n\n    // Construct a new array to replace the state.\n    let newCategories = [...categories];\n    let categoryPosition = findPositionInArray(id, categories);\n    newCategories[categoryPosition] = newCategory;\n    setCategories(newCategories);\n  }\n\n  const editCategoryTitleClick = (e) => {\n    e.preventDefault();\n    // Set the target category into edit mode, unless it is the all category.\n    if (selectedCategory !== -1) {\n      changeCategory(selectedCategory, { editMode: true });\n    }\n  }\n\n  const editCategoryColor = (id) => {\n    let newColor = \"blue\";\n    changeCategory(id, { color: newColor });\n  }\n\n  const selectCategory = (id) => {\n    // Find the old selected category and make its selected property false.\n    if (selectedCategory !== -1) {\n      changeCategory(selectedCategory, { selected: false });\n    }\n\n    // Set the id of the selected category.\n    setSelectedCategory(id);\n\n    if (id === -1) {\n      // If we are selecting the all category, which is not a true category...\n      // Don't change any categories. Instead, use the all ref to set selected on the all link. TODO\n    } else {\n      // If we are selecting a normal category...\n      // Find the object and set its selected to true.\n      changeCategory(id, { selected: true });\n    }\n  }\n\n  const deleteCategory = (id) => {\n    // Create new categories array with the object removed.\n    let newCategories = [...categories];\n    let categoryPosition = findPositionInArray(id, categories);\n    newCategories.splice(categoryPosition, 1);\n    setCategories(newCategories);\n\n    // Reset selected category to \"all\".\n    setSelectedCategory(-1);\n  }\n\n  const deleteCategoryClick = (e) => {\n    e.preventDefault();\n    // Delete the currently selected category, unless it is the all category.\n    if (selectedCategory !== -1) {\n      deleteCategory(selectedCategory);\n    }\n  }\n\n  const allCategoryClick = (e) => {\n    e.preventDefault();\n    selectCategory(-1);\n  }\n\n  // RENDER\n\n  // Append a selected class to all if all is selected.\n  let selectedClassAll;\n  if (selectedCategory === -1) {\n    selectedClassAll = \" selected\";\n  } else {\n    selectedClassAll = \"\";\n  }\n\n  // Main app view.\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-column\">\n        <div className=\"main-logo\">\n          <div className=\"box-logo\"></div>\n          <h1>Notebot</h1>\n        </div>\n        <div className=\"main-desc\">\n          <p>A demo for a simple React-based local storage note taking application. Not intended for serious use.</p>\n          <p>Created by @prokhorvlg (Valentin Sigalov).</p>\n        </div>\n        <div className=\"main-search\">\n          <h2>Search</h2>\n          <input />\n        </div>\n        <div className=\"main-categories\">\n          <div className=\"main-categories-bar\">\n            <h2>Categories</h2>\n            <a href=\"#\" onClick={addCategory}>Create category</a>\n            <a href=\"#\" onClick={editCategoryTitleClick}>Edit title</a>\n            <a href=\"#\" onClick={editCategoryColor}>Edit color</a>\n            <a href=\"#\" onClick={deleteCategoryClick}>Delete category</a>\n          </div>\n          <ul>\n            <li>\n              <a\n                id=\"category-all\"\n                ref={categoryAllRef}\n                href=\"#\"\n                class={selectedClassAll}\n                onClick={allCategoryClick}>\n                  All\n              </a>\n            </li>\n            {categories.map((category, i) => (<Category\n                category={category}\n                changeCategory={changeCategory}\n                deleteCategory = {deleteCategory}\n                selectCategory = {selectCategory}\n              />)\n            )}\n          </ul>\n        </div>\n        <div className=\"links-box\">\n          <p>Visit my site at x!</p>\n        </div>\n      </div>\n      <div className=\"list-column\">\n        <ul>\n        </ul>\n        <div className=\"note-controls\">\n        </div>\n      </div>\n      <div className=\"note-column\">\n        <div className=\"note-title-bar\"></div>\n        <div className=\"note-contents\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.scss';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}