{"version":3,"sources":["utils/Utils.js","utils/firebase.js","utils/DatabaseCalls.js","components/CategoryAll.js","components/Category.js","components/CategoriesList.js","components/CategoryColorPicker.js","components/CategoryEditControls.js","components/Note.js","components/NotesList.js","components/NoteEditor.js","data/CategoriesInitialData.js","data/NotesInitialData.js","functionality/UserFunctionality.js","functionality/CategoriesFunctionality.js","functionality/NotesFunctionality.js","Main.js","reportWebVitals.js","index.js"],"names":["generateId","arrayOfObjects","length","parseInt","id","findObjectInArray","find","object","findPositionInArray","map","indexOf","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","userKey","a","firestore","collection","doc","get","then","exists","console","log","data","catch","error","add","title","categories","notes","docRef","color","body","CategoryAll","selectedClassAll","selectCategory","selectedCategory","href","className","onClick","e","preventDefault","Category","category","changeCategory","deleteCategory","categorySetMode","setCategorySetMode","changeNote","selectedNote","categoryRef","useRef","useEffect","editMode","current","focus","selectedClass","selected","ref","placeholder","onInput","name","target","value","handleEdit","onKeyDown","key","blur","handleKeyDown","onBlur","handleExit","style","borderColor","backgroundColor","CategoriesList","i","CategoryColorPicker","editColorMode","setEditColorMode","selectedCategoryColor","setSelectedCategoryColor","useColor","setColor","hex","onOutsideClick","width","height","onChange","hideHSV","hideRGB","hideHEX","dark","CategoryEditControls","icon","faEdit","fixedWidth","faFill","faTrashAlt","Note","note","deleteNote","selectNote","noteRef","modified","Date","toLocaleString","contents","visible","date","formatter","unit","suffix","plural","NotesList","concat","sort","b","NoteEditor","init","menubar","plugins","toolbar","forced_root_block_attrs","onEditorChange","newValue","editor","CategoriesInitialData","NotesInitialData","useUser","useState","userId","setUserId","storeLocalUser","notebotUserStore","localStorage","setItem","JSON","stringify","retrieveLocalUser","parse","getItem","Object","keys","DatabaseCalls","loadUser","createUser","newUserId","useCategories","initialCategories","setSelectedCategory","setCategories","React","createEmptyCategory","newId","emptyCategory","colors","Math","floor","random","generateColor","newProperties","originalCategory","newCategory","assign","newCategories","categoryPosition","splice","useNotes","initialNotes","setSelectedNote","setNotes","createEmptyNote","emptyNote","originalNote","newNote","newNotes","notePosition","Main","initUser","addCategory","addNote","searchString","setSearchString","noteIsInSelectedCategory","noteContainsSearchString","toLowerCase","includes","faPlusSquare","handleSearchInput","toString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13e132c0.chunk.js","sourcesContent":["// ** UTILS\r\n// Generates a new id number based on the last value found in the array plus one.\r\nexport const generateId = (arrayOfObjects) => {\r\n  if (arrayOfObjects.length > 0) {\r\n    return parseInt(arrayOfObjects[arrayOfObjects.length - 1].id) + 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n// Generates a random hex code from a list.\r\nexport const generateColor = () => {\r\n  const colors = [\"#91aaff\", \"#ff9e9e\", \"#ff80c5\", \"#7afbff\", \"#8aff9c\"];\r\n  return colors[Math.floor(Math.random()*colors.length)];\r\n}\r\n// Finds the object with the given id within the array.\r\nexport const findObjectInArray = (id, arrayOfObjects) => {\r\n  return arrayOfObjects.find(object => object.id === id);\r\n}\r\n// Finds the position of the object with the given id within the array.\r\nexport const findPositionInArray = (id, arrayOfObjects) => {\r\n  return arrayOfObjects.map(function(object) {return object.id; }).indexOf(id);\r\n}\r\n\r\n// Color conversion functions.\r\n/*\r\nexport const hexToRgb = (hex) => {\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result ? {\r\n    \"r\": parseInt(result[1], 16),\r\n    \"g\": parseInt(result[2], 16),\r\n    \"b\": parseInt(result[3], 16)\r\n  } : null;\r\n}\r\nexport const rgbToHsv = (rgb) => {\r\n  var r = rgb.r, g = rgb.g, b = rgb.b;\r\n  var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n  var h, s, v = max;\r\n\r\n  var d = max - min;\r\n  s = max == 0 ? 0 : d / max;\r\n\r\n  if (max === min) {\r\n    h = 0; // achromatic\r\n  } else {\r\n    switch (max) {\r\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n      case g: h = (b - r) / d + 2; break;\r\n      case b: h = (r - g) / d + 4; break;\r\n    }\r\n\r\n    h /= 6;\r\n  }\r\n\r\n  return [ h, s, v ];\r\n}*/\r\n","import firebase from \"firebase/app\";\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDdCjbP7lQVb7--7uraYnkEdLGjWTmWckE\",\r\n  authDomain: \"notebot-42.firebaseapp.com\",\r\n  databaseURL: \"https://notebot-42.firebaseio.com\",\r\n  projectId: \"notebot-42\",\r\n  storageBucket: \"notebot-42.appspot.com\",\r\n  messagingSenderId: \"884273569921\",\r\n  appId: \"1:884273569921:web:e56bf1258d353e4ae02d80\",\r\n  measurementId: \"G-7B4K7B82XL\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics();\r\n\r\nexport default firebase;\r\n","import firebase from \"./firebase\";\r\n\r\n// databaseCalls: interface for calls to Firebase\r\n\r\n// ENDPOINTS\r\n\r\n/*\r\n\r\naddCategory\r\nremoveCategory\r\neditCategory\r\n\r\naddNote\r\nremoveNote\r\neditNote\r\n\r\n*/\r\n\r\nexport class DatabaseCalls {\r\n\r\n  async loadUser(userKey) {\r\n    firebase.firestore().collection(\"users\").doc(userKey).get().then((doc) => {\r\n        if (doc.exists) {\r\n            console.log(\"Document data:\", doc.data());\r\n        } else {\r\n            // doc.data() will be undefined in this case\r\n            console.log(\"No such document!\");\r\n        }\r\n    }).catch((error) => {\r\n        console.log(\"Error getting document:\", error);\r\n    });\r\n  }\r\n\r\n  async createUser() {\r\n    return firebase.firestore()\r\n      .collection(\"users\")\r\n      .add({\r\n        title: \"user\",\r\n        categories: [],\r\n        notes: []\r\n      }).then(function(docRef) {\r\n          return docRef.id;\r\n      });\r\n  }\r\n\r\n  createCategory(userKey) {\r\n    firebase.firestore()\r\n      .collection(\"users\").doc(userKey)\r\n      .collection(\"categories\")\r\n      .add({\r\n        title: \"category\",\r\n        color: \"#0f0\",\r\n      }).then(function(docRef) {\r\n          return docRef.id;\r\n      });\r\n\r\n\r\n    firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .add({\r\n      title: \"New Category\",\r\n      body: \"This is to check the Integration is working\"\r\n    });\r\n  }\r\n}\r\n\r\nexport default new DatabaseCalls();\r\n","import React, { useRef, useEffect } from 'react';\r\n\r\n// CategoryAll: contains the button for the \"all\" category, which is not a true category.\r\nconst CategoryAll = ({selectCategory, selectedCategory}) => {\r\n\r\n  // Append a selected class to all if all is selected.\r\n  let selectedClassAll;\r\n  if (selectedCategory === -1) {\r\n    selectedClassAll = \" selected\";\r\n  } else {\r\n    selectedClassAll = \"\";\r\n  }\r\n\r\n  // Handles the click of the \"all\" category which displays all notes.\r\n  const allCategoryClick = (e) => {\r\n    e.preventDefault();\r\n    selectCategory(-1);\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <a\r\n        id=\"category-all\"\r\n        href=\"#\"\r\n        className={\"category-all \" + selectedClassAll}\r\n        onClick={allCategoryClick}>\r\n          All Notes\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n};\r\n\r\nexport default CategoryAll;\r\n","import React, { useRef, useEffect } from 'react';\r\n\r\nimport { ColorPicker, useColor } from \"react-color-palette\";\r\nimport \"react-color-palette/lib/css/styles.css\";\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nconst Category = ({ category, changeCategory, deleteCategory, selectCategory, categorySetMode, setCategorySetMode, changeNote, selectedNote }) => {\r\n\r\n  // Make sure that the input element is focused when the category is in edit mode.\r\n  const categoryRef = useRef(null);\r\n  useEffect(() => {\r\n    if (category.editMode) {\r\n      categoryRef.current.focus();\r\n    }\r\n  }, [category.editMode]);\r\n\r\n  // Handle any events that occur in edit mode.\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.target.blur();\r\n    }\r\n  }\r\n  const handleExit = (e) => {\r\n    // If the input is empty, delete the Category.\r\n    if (e.target.value === \"\") {\r\n      deleteCategory(category.id);\r\n    } else {\r\n      // If input is not empty, update the Category state.\r\n      changeCategory(category.id, { name: e.target.value, editMode: false });\r\n      // Select the newly edited category.\r\n      selectCategory(category.id);\r\n    }\r\n  }\r\n  const handleEdit = (e) => {\r\n    changeCategory(category.id, { name: e.target.value });\r\n  }\r\n\r\n  // Handle any events that occur in normal mode (as an anchor).\r\n  const handleClick = (e) => {\r\n    if (!categorySetMode) {\r\n      // Normal category select mode, just select the targetted category.\r\n      selectCategory(category.id);\r\n    } else {\r\n      // If we are in set mode for a note,\r\n      // Change the selected note's category to this one.\r\n      changeNote(selectedNote, { category: category.id });\r\n      // Reset category set mode.\r\n      setCategorySetMode(false);\r\n      selectCategory(category.id);\r\n    }\r\n  }\r\n\r\n  // Append a selected class if this category is selected.\r\n  let selectedClass;\r\n  if (category.selected) {\r\n    selectedClass = \" selected\";\r\n  } else {\r\n    selectedClass = \"\";\r\n  }\r\n\r\n  if (category.editMode) {\r\n    return (\r\n      <li className=\"category-item edit-mode\">\r\n        <input\r\n          id={\"category-\" + category.id}\r\n          ref={categoryRef}\r\n          placeholder=\"Enter a category title.\"\r\n          className=\"feature-input\"\r\n          onInput={(e) => handleEdit(e)}\r\n          onKeyDown={(e) => handleKeyDown(e)}\r\n          onBlur={(e) => handleExit(e)}\r\n          value={category.name}\r\n          />\r\n      </li>\r\n    );\r\n  } else {\r\n    return (\r\n      <li className={\"category-item link-mode \" + ((categorySetMode === true) ? 'category-set-mode' : '')}>\r\n        <a\r\n          id={\"category-\" + category.id}\r\n          ref={categoryRef}\r\n          className={selectedClass}\r\n          style={{ color: category.color, borderColor: category.color, backgroundColor: category.color }}\r\n          href=\"#\"\r\n          onClick={(e) => handleClick(e)}>\r\n            {category.name}\r\n        </a>\r\n      </li>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default Category;\r\n","import React from 'react';\r\n\r\n// Components\r\nimport Category from './Category';\r\n\r\nconst CategoriesList = ({ categories, changeCategory, deleteCategory, selectCategory, changeNote, selectedNote, categorySetMode, setCategorySetMode }) => {\r\n\r\n  return (\r\n    categories.map((category, i) => (\r\n      <Category\r\n        category={category}\r\n        changeCategory={changeCategory}\r\n        deleteCategory = {deleteCategory}\r\n        selectCategory = {selectCategory}\r\n        categorySetMode={categorySetMode}\r\n        setCategorySetMode={setCategorySetMode}\r\n        changeNote={changeNote}\r\n        selectedNote={selectedNote}\r\n      />)\r\n    )\r\n  );\r\n\r\n};\r\n\r\nexport default CategoriesList;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { ColorPicker, useColor } from \"react-color-palette\";\r\nimport \"react-color-palette/lib/css/styles.css\";\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nconst CategoryColorPicker = ({editColorMode, setEditColorMode, selectedCategory, selectedCategoryColor, setSelectedCategoryColor, changeCategory}) => {\r\n\r\n  // Handle color changes for the Category.\r\n  // On app load, set the color to match the app state.\r\n  const [color, setColor] = useColor(\"hex\", selectedCategoryColor);\r\n\r\n  // On color picker update, set app state to reflect color.\r\n  useEffect(() => {\r\n    if (selectedCategory !== -1) {\r\n      changeCategory(selectedCategory, { color: color.hex });\r\n      //setSelectedCategoryColor(color.hex);\r\n    }\r\n  }, [color]);\r\n\r\n  // Handle the user clicking outside of the color picker, effectively ending the selection.\r\n  const handleOutsideColorClick = (e) => {\r\n    setEditColorMode(false);\r\n  }\r\n\r\n  return (\r\n    <OutsideClickHandler\r\n      onOutsideClick={handleOutsideColorClick}>\r\n        <div className={\"category-colorPicker \" + ((editColorMode === true) ? 'showing' : 'not-showing')}>\r\n          <ColorPicker width={250} height={100} color={color} onChange={setColor} hideHSV hideRGB hideHEX dark />\r\n        </div>\r\n    </OutsideClickHandler>\r\n  );\r\n};\r\n\r\nexport default CategoryColorPicker;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faFill, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// CategoryEditControls: contains a list of controls for editing the currently selected category.\r\nconst CategoryEditControls = ({selectedCategory, selectedCategoryColor, changeCategory, deleteCategory, editColorMode, setEditColorMode}) => {\r\n\r\n  // Handles click of edit category title click.\r\n  const editCategoryTitleClick = (e) => {\r\n    e.preventDefault();\r\n    // Set the target category into edit mode, unless it is the all category.\r\n    if (selectedCategory !== -1) {\r\n      changeCategory(selectedCategory, { editMode: true });\r\n    }\r\n  }\r\n\r\n  // Handles click of edit color category.\r\n  const editCategoryColorClick = (e) => {\r\n    e.preventDefault();\r\n    // Set the target category into edit mode, unless it is the all category.\r\n    if (selectedCategory !== -1) {\r\n      changeCategory(selectedCategory, { editMode: false });\r\n      if (editColorMode === true) {\r\n        console.log(\"Set\")\r\n        setEditColorMode(false);\r\n      } else {\r\n        setEditColorMode(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles click of delete category.\r\n  const deleteCategoryClick = (e) => {\r\n    e.preventDefault();\r\n    // Delete the currently selected category, unless it is the all category.\r\n    if (selectedCategory !== -1) {\r\n      deleteCategory(selectedCategory);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ borderColor: selectedCategoryColor }} className={\"main-categories-controls \" + ((selectedCategory !== -1) ? 'showing' : 'not-showing')}>\r\n      <a href=\"#\" onClick={editCategoryTitleClick}>\r\n        <FontAwesomeIcon icon={faEdit} color={selectedCategoryColor} className=\"fa-link-icon\" fixedWidth  />\r\n        Edit title\r\n      </a>\r\n      <a href=\"#\" onClick={editCategoryColorClick}>\r\n        <FontAwesomeIcon icon={faFill} color={selectedCategoryColor} className=\"fa-link-icon\" fixedWidth  />\r\n        Edit color\r\n      </a>\r\n      <a href=\"#\" onClick={deleteCategoryClick}>\r\n        <FontAwesomeIcon icon={faTrashAlt} color={selectedCategoryColor} className=\"fa-link-icon\" fixedWidth  />\r\n        Delete category\r\n      </a>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default CategoryEditControls;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport TimeAgo from 'react-timeago'\r\nimport { generateId, generateColor, findObjectInArray, findPositionInArray } from \"../utils/Utils\";\r\n\r\nconst Note = ({ note, changeNote, deleteNote, selectNote, selectedNote, categories }) => {\r\n\r\n  // Make sure that the input element is focused when the note is in edit mode.\r\n  const noteRef = useRef(null);\r\n  useEffect(() => {\r\n    if (note.editMode) {\r\n      noteRef.current.focus();\r\n    }\r\n  }, [note.editMode]);\r\n\r\n  // Update the \"last modified\" time to now any time the contents of the notes change.\r\n  useEffect(() => {\r\n    if (selectedNote) {\r\n      changeNote(selectedNote, { modified: new Date().toLocaleString() });\r\n    }\r\n  }, [note.contents, note.title]);\r\n\r\n  // Handle any events that occur in edit mode.\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.target.blur();\r\n    }\r\n  }\r\n  const handleExit = (e) => {\r\n    // If the input is empty, delete the Category.\r\n    if (e.target.value === \"\") {\r\n      deleteNote(note.id);\r\n    } else {\r\n      // If input is not empty, update the Category state.\r\n      changeNote(note.id, { title: e.target.value, editMode: false });\r\n      // Select the newly edited category.\r\n      selectNote(note.id);\r\n    }\r\n  }\r\n  const handleEdit = (e) => {\r\n    changeNote(note.id, { title: e.target.value });\r\n  }\r\n\r\n  // Handle any events that occur in normal mode (as an anchor).\r\n  const handleClick = (e) => {\r\n    selectNote(note.id);\r\n  }\r\n\r\n  if (note.editMode) {\r\n    return (\r\n      <li className={\"category-item edit-mode \" + ((selectedNote === note.id) ? 'selected' : '')}>\r\n        <input\r\n          id={\"note-\" + note.id}\r\n          ref={noteRef}\r\n          placeholder=\"Enter a note title.\"\r\n          className=\"feature-input\"\r\n          onInput={(e) => handleEdit(e)}\r\n          onKeyDown={(e) => handleKeyDown(e)}\r\n          onBlur={(e) => handleExit(e)}\r\n          value={note.title}\r\n          />\r\n      </li>\r\n    );\r\n  } else if (note.visible) {\r\n    return (\r\n      <li className={\"note-title link-mode \" + ((selectedNote === note.id) ? 'selected' : '')}>\r\n        <a href=\"#\" onClick={(e) => handleClick(e)}>\r\n          <div className=\"note-title-color\" style={{ backgroundColor: findObjectInArray(note.category, categories).color }}></div>\r\n          <div className=\"note-title-box\">\r\n            <h2>{note.title}</h2>\r\n            <p>\r\n              <TimeAgo\r\n                  date={note.modified}\r\n                  formatter={(value: number, unit: TimeAgo.Unit, suffix: TimeAgo.Suffix) => {\r\n                    if (unit === 'second') return 'just now';\r\n                    const plural: string = value !== 1 ? 's' : '';\r\n                    return `${value} ${unit}${plural} ${suffix}`;\r\n                  }}\r\n                />\r\n            </p>\r\n          </div>\r\n        </a>\r\n      </li>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Note;\r\n","import React from 'react';\r\n\r\n// Components\r\nimport Note from './Note';\r\n\r\nconst NotesList = ({ notes, changeNote, deleteNote, selectNote, selectedNote, categories }) => {\r\n\r\n  return (\r\n    [].concat(notes)\r\n      .sort((a, b) => { return new Date(b.modified) - new Date(a.modified) })\r\n      .map((note, i) =>\r\n        <Note\r\n          note={note}\r\n          changeNote={changeNote}\r\n          deleteNote={deleteNote}\r\n          selectNote={selectNote}\r\n          selectedNote={selectedNote}\r\n          categories={categories}\r\n        />)\r\n  );\r\n\r\n};\r\n\r\nexport default NotesList;\r\n","import React from 'react';\r\nimport { generateId, generateColor, findObjectInArray, findPositionInArray } from \"../utils/Utils\";\r\n// - Tiny MCE for WISYWIG\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nconst NoteEditor = ({ selectedNote, notes, changeNote }) => {\r\n\r\n  if (selectedNote !== null) {\r\n    return (\r\n      <Editor\r\n        value={findObjectInArray(selectedNote, notes).contents}\r\n        apiKey=\"nacx0iqah4xpy7tb8prkc3hy42bdva4exnbaurkyumhwg0f2\"\r\n        init={{\r\n          menubar: false,\r\n          plugins: [\r\n            'advlist autolink lists link image',\r\n            'charmap print preview anchor help',\r\n            'searchreplace visualblocks code',\r\n            'insertdatetime media table paste wordcount'\r\n          ],\r\n          toolbar:\r\n            'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent | help',\r\n          forced_root_block_attrs: {\r\n            'class': 'editor-font',\r\n            'style': 'font-family: Inter;'\r\n          }\r\n        }}\r\n\r\n        onEditorChange={(newValue, editor) => {\r\n          changeNote(selectedNote, { contents: newValue });\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n};\r\n\r\nexport default NoteEditor;\r\n","const CategoriesInitialData = [\r\n    {\r\n      id: 0,\r\n      name: 'Personal',\r\n      color: '#00ff84',\r\n      editMode: false,\r\n      selected: false\r\n    },\r\n    {\r\n      id: 1,\r\n      name: 'Work',\r\n      color: '#ffb322',\r\n      editMode: false,\r\n      selected: false\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Miscellaneous',\r\n      color: '#16ecff',\r\n      editMode: false,\r\n      selected: false\r\n    }\r\n  ];\r\n\r\nexport default CategoriesInitialData;\r\n","const NotesInitialData = [\r\n    {\r\n      id: 0,\r\n      title: 'Welcome!',\r\n      category: 0,\r\n      modified: new Date('January 30, 2021 06:15:30').toLocaleString(),\r\n      contents: `<h2 class=\"editor-font\" style=\"font-family: Inter;\">Hey there, visitor!</h2>\r\n<p class=\"editor-font\" style=\"font-family: Inter;\">This is a demo for a simple React note-taking application.</p>\r\n<p class=\"editor-font\" style=\"font-family: Inter;\">The demo is not intended for serious use. <strong>Your changes will not persist.</strong></p>\r\n<p class=\"editor-font\" style=\"font-family: Inter;\">Created with love by <span style=\"text-decoration: underline;\">@prokhorvlg (Valentin Sigalov)</span>!</p>`,\r\n      editMode: false,\r\n      visible: false\r\n    },\r\n    {\r\n      id: 1,\r\n      title: 'Area 51 vacation plans',\r\n      category: 0,\r\n      modified: new Date('June 26, 2021 12:15:30').toLocaleString(),\r\n      contents: 'Contents of a note.',\r\n      editMode: false,\r\n      visible: false\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Funniest joke ever',\r\n      category: 0,\r\n      modified: new Date('June 29, 2021 23:15:30').toLocaleString(),\r\n      contents: 'Contents of a note.',\r\n      editMode: false,\r\n      visible: false\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Lol tech specs',\r\n      category: 1,\r\n      modified: new Date('July 3, 2021 09:15:30').toLocaleString(),\r\n      contents: 'Contents of a note.',\r\n      editMode: false,\r\n      visible: false\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Cats on the moon',\r\n      category: 2,\r\n      modified: new Date('July 4, 2021 05:15:30').toLocaleString(),\r\n      contents: 'Contents of a note.',\r\n      editMode: false,\r\n      visible: false\r\n    },\r\n  ];\r\n\r\nexport default NotesInitialData;\r\n","import { useState } from 'react';\r\n\r\n// Utilities\r\nimport DatabaseCalls from \"../utils/DatabaseCalls\";\r\n\r\nconst useUser = () => {\r\n  // Stores the id of the user.\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  const initUser = () => {\r\n    // Try to retrieve the user from localStorage, if it exists.\r\n    let userId = retrieveLocalUser();\r\n    if (userId && Object.keys(userId).length !== 0) {\r\n      // If user exists, then make a call to get the user's notes.\r\n      DatabaseCalls.loadUser(userId.userId);\r\n      // Save the user in the state.\r\n      setUserId(userId.userId);\r\n    } else {\r\n      // If user does not exist, then make a call to create the user on Firebase.\r\n      DatabaseCalls.createUser().then((newUserId) => {\r\n        // Save the new user in the state.\r\n        setUserId(newUserId);\r\n        // Save the user Id in localStorage.\r\n        storeLocalUser();\r\n      });\r\n    }\r\n  }\r\n\r\n  // ** LOCAL STORAGE\r\n  // Store and retrieve the user id from local storage, if the user refreshes the page.\r\n  const storeLocalUser = () => {\r\n    const notebotUserStore = userId;\r\n    localStorage.setItem('notebotUserStore', JSON.stringify(notebotUserStore));\r\n  }\r\n  const retrieveLocalUser = () => {\r\n    const notebotUserStore = JSON.parse(localStorage.getItem('notebotUserStore'));\r\n    return notebotUserStore;\r\n  }\r\n\r\n  return [\r\n      initUser\r\n    ];\r\n}\r\n\r\nexport default useUser;\r\n","import React, { useState } from 'react';\r\n\r\n// Utilities\r\nimport { generateId, generateColor, findObjectInArray, findPositionInArray } from \"../utils/Utils\";\r\n\r\n// ** CATEGORIES\r\nconst useCategories = (initialCategories) => {\r\n  // Stores the currently selected category that is highlighted and who's notes are being displayed.\r\n  const [selectedCategory, setSelectedCategory] = useState(-1);\r\n\r\n  // Stores the categories associated with the user.\r\n  const [categories, setCategories] = useState(initialCategories);\r\n\r\n  // Set the theme color of the category editor box and its contents.\r\n  const [selectedCategoryColor, setSelectedCategoryColor] = useState(\"#ffffff\");\r\n  React.useEffect(() => {\r\n    if (selectedCategory !== -1) {\r\n      setSelectedCategoryColor(findObjectInArray(selectedCategory, categories).color);\r\n    }\r\n  }, [selectedCategory, categories]);\r\n\r\n  // Trigger the process to add a new category.\r\n  const addCategory = () => {\r\n    createEmptyCategory();\r\n  }\r\n\r\n  // Create a new empty category (a bucket for notes).\r\n  const createEmptyCategory = () => {\r\n    const newId = generateId(categories);\r\n    const newColor = generateColor();\r\n    const emptyCategory = {\r\n      id: newId,\r\n      name: '',\r\n      color: newColor, // replace with random bright color\r\n      editMode: true,\r\n      selected: false\r\n    };\r\n    setCategories(categories  => [...categories, emptyCategory]);\r\n    return newId;\r\n  }\r\n\r\n  // Change category to the details provided in the input object.\r\n  // Expect input object to look like { key: newValue, ... }\r\n  const changeCategory = (id, newProperties) => {\r\n    // Find the object with the relevant id.\r\n    const originalCategory = findObjectInArray(id, categories);\r\n    // Replace any values within it with the submitted properties.\r\n    const newCategory = Object.assign(originalCategory, newProperties);\r\n\r\n    // Construct a new array to replace the state.\r\n    const newCategories = [...categories];\r\n    const categoryPosition = findPositionInArray(id, categories);\r\n    newCategories[categoryPosition] = newCategory;\r\n    setCategories(newCategories);\r\n  }\r\n\r\n  // Causes the category with the given id to be set to selected within the state.\r\n  const selectCategory = (id) => {\r\n    // Find the old selected category and make its selected property false.\r\n    if (selectedCategory !== -1) {\r\n      changeCategory(selectedCategory, { selected: false });\r\n    }\r\n\r\n    // Set the id of the selected category.\r\n    setSelectedCategory(id);\r\n\r\n    if (id === -1) {\r\n      // If we are selecting the all category, which is not a true category...\r\n      // Don't change any categories.\r\n    } else {\r\n      // If we are selecting a normal category...\r\n      // Find the object and set its selected to true.\r\n      changeCategory(id, { selected: true });\r\n    }\r\n  }\r\n\r\n  // Deletes a category based on id.\r\n  const deleteCategory = (id) => {\r\n    // There must be at least 1 category to create notes into.\r\n    if (categories.length !== 1) {\r\n      // Create new categories array with the object removed.\r\n      let newCategories = [...categories];\r\n      const categoryPosition = findPositionInArray(id, categories);\r\n      newCategories.splice(categoryPosition, 1);\r\n      setCategories(newCategories);\r\n\r\n      // Reset selected category to \"all\".\r\n      setSelectedCategory(-1);\r\n    }\r\n  }\r\n\r\n  return [\r\n      selectedCategory,\r\n      setSelectedCategory,\r\n      categories,\r\n      selectedCategoryColor,\r\n      setSelectedCategoryColor,\r\n      addCategory,\r\n      changeCategory,\r\n      selectCategory,\r\n      deleteCategory\r\n    ];\r\n}\r\n\r\nexport default useCategories;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n// Utilities\r\nimport { generateId, generateColor, findObjectInArray, findPositionInArray } from \"../utils/Utils\";\r\n\r\n// ** NOTES\r\nconst useNotes = (initialNotes, categories, selectedCategory) => {\r\n  // Stores the currently selected note that is being edited in the main panel.\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n\r\n  // Stores the notes associated with the user.\r\n  const [notes, setNotes] = useState(initialNotes);\r\n\r\n  // Trigger the process to add a new note.\r\n  const addNote = () => {\r\n    const noteId = createEmptyNote();\r\n  }\r\n\r\n  // Create a new empty category (a bucket for notes).\r\n  const createEmptyNote = () => {\r\n    const newId = generateId(notes);\r\n    const assignedCategory = (selectedCategory !== -1 ? selectedCategory : categories[0].id);\r\n    const emptyNote = {\r\n      id: newId,\r\n      title: '',\r\n      category: assignedCategory,\r\n      modified: new Date().toLocaleString(),\r\n      contents: '',\r\n      selected: false,\r\n      editMode: true,\r\n      visible: true\r\n    }\r\n    setNotes(notes  => [...notes, emptyNote]);\r\n    return newId;\r\n  }\r\n\r\n  // Change note to the details provided in the input object.\r\n  // Expect input object to look like { key: newValue, ... }\r\n  const changeNote = (id, newProperties) => {\r\n    // Find the object with the relevant id.\r\n    const originalNote = findObjectInArray(id, notes);\r\n    // Replace any values within it with the submitted properties.\r\n    const newNote = Object.assign(originalNote, newProperties);\r\n\r\n    // Construct a new array to replace the state.\r\n    const newNotes = [...notes];\r\n    const notePosition = findPositionInArray(id, notes);\r\n    newNotes[notePosition] = newNote;\r\n    setNotes(newNotes);\r\n  }\r\n\r\n  // Causes the note with the given id to be set to selected within the state.\r\n  const selectNote = (id) => {\r\n    setSelectedNote(id);\r\n  }\r\n\r\n  // Deletes a note based on id.\r\n  const deleteNote = (id) => {\r\n    // Create new notes array with the object removed.\r\n    let newNotes = [...notes];\r\n    const notePosition = findPositionInArray(id, notes);\r\n    newNotes.splice(notePosition, 1);\r\n    setNotes(newNotes);\r\n\r\n    // Reset selected note to \"all\".\r\n    setSelectedNote(null);\r\n  }\r\n\r\n  return [\r\n      selectedNote,\r\n      setSelectedNote,\r\n      notes,\r\n      addNote,\r\n      changeNote,\r\n      selectNote,\r\n      deleteNote\r\n    ];\r\n}\r\n\r\nexport default useNotes;\r\n","import React, { useEffect, useMemo, useState, createRef, useRef } from 'react';\n\n// Addons\n// - Font Awesome for icons\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\n\nimport TimeAgo from 'react-timeago'\n\n// Utilities\nimport { generateId, generateColor, findObjectInArray, findPositionInArray } from \"./utils/Utils\";\nimport DatabaseCalls from \"./utils/DatabaseCalls\";\n\n// Components\nimport CategoryAll from './components/CategoryAll';\nimport CategoriesList from './components/CategoriesList';\nimport CategoryColorPicker from './components/CategoryColorPicker';\nimport CategoryEditControls from './components/CategoryEditControls';\nimport NotesList from './components/NotesList';\nimport Note from './components/Note';\nimport NoteEditor from './components/NoteEditor';\n\n// Initial Data\nimport CategoriesInitialData from './data/CategoriesInitialData';\nimport NotesInitialData from './data/NotesInitialData';\n\n// Functionality\nimport useUser from  './functionality/UserFunctionality.js';\nimport useCategories from  './functionality/CategoriesFunctionality.js';\nimport useNotes from  './functionality/NotesFunctionality.js';\n\n// MAIN APPLICATION\nconst Main = () => {\n\n  // * STATE\n  // ** USER: Custom hook for User-related functionality.\n  const [initUser] = useUser();\n  React.useEffect(() => {\n    // Load the user data or creates a new one if they do not exist on load.\n    initUser();\n  }, []);\n\n  // ** CATEGORIES: Custom hook for Categories-related functionality.\n  const [\n    selectedCategory,\n    setSelectedCategory,\n    categories,\n    selectedCategoryColor,\n    setSelectedCategoryColor,\n    addCategory,\n    changeCategory,\n    selectCategory,\n    deleteCategory\n  ] = useCategories(CategoriesInitialData);\n\n  const [categorySetMode, setCategorySetMode] = useState(false);\n\n  // ** CATEGORY COLOR PICKER\n  const [editColorMode, setEditColorMode] = useState(false);\n\n  // ** NOTES: Custom hook for Notes-related functionality.\n  const [\n    selectedNote,\n    setSelectedNote,\n    notes,\n    addNote,\n    changeNote,\n    selectNote,\n    deleteNote\n  ] = useNotes(NotesInitialData, categories, selectedCategory);\n\n  // ** SEARCH\n  const [searchString, setSearchString] = useState(\"\");\n\n  const handleSearchInput = (e) => {\n    setSearchString(e.target.value);\n  }\n\n  React.useEffect(() => {\n\n    // Filter the selection down.\n    notes.map((note) => {\n      // Make sure note is in selected category (or all are visible).\n      const noteIsInSelectedCategory = (note.category === selectedCategory || selectedCategory === -1);\n      const noteContainsSearchString = (note.title.toLowerCase().includes(searchString) || note.contents.toLowerCase().includes(searchString) || searchString === \"\");\n      if (noteIsInSelectedCategory && noteContainsSearchString) {\n        changeNote(note.id, { visible: true });\n      } else {\n        changeNote(note.id, { visible: false });\n      }\n    })\n\n  }, [searchString, selectedCategory]);\n\n  // * RENDER\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-column\">\n        <div className=\"main-logo\">\n          <div className=\"box-logo\"></div>\n          <h1>Notebot</h1>\n        </div>\n        <div className=\"main-categories\">\n\n          <ul className=\"main-categories-list\">\n            <CategoryAll\n              selectCategory={selectCategory}\n              selectedCategory={selectedCategory}\n              />\n            <CategoriesList\n              categories={categories}\n              changeCategory={changeCategory}\n              deleteCategory={deleteCategory}\n              selectCategory={selectCategory}\n              changeNote={changeNote}\n              selectedNote={selectedNote}\n              categorySetMode={categorySetMode}\n              setCategorySetMode={setCategorySetMode}\n              />\n          </ul>\n\n          <CategoryColorPicker\n            editColorMode={editColorMode}\n            setEditColorMode={setEditColorMode}\n            selectedCategory={selectedCategory}\n            selectedCategoryColor={selectedCategoryColor}\n            setSelectedCategoryColor={setSelectedCategoryColor}\n            changeCategory={changeCategory}\n            />\n\n          <CategoryEditControls\n            selectedCategory={selectedCategory}\n            selectedCategoryColor={selectedCategoryColor}\n            changeCategory={changeCategory}\n            deleteCategory={deleteCategory}\n            editColorMode={editColorMode}\n            setEditColorMode={setEditColorMode}\n            />\n\n          <div className=\"main-categories-add\">\n            <a href=\"#\" onClick={addCategory} className=\"feature-link\">\n              <FontAwesomeIcon icon={faPlusSquare} className=\"fa-link-icon\" />\n              Add category\n            </a>\n          </div>\n\n        </div>\n      </div>\n      <div className=\"list-column\">\n        <div className=\"list-search-box\"><h2>Search your notes</h2>\n          <input\n            className=\"feature-input\"\n            onInput={(e) => handleSearchInput(e)}\n            />\n        </div>\n        <ul>\n          <NotesList\n            notes={notes}\n            changeNote={changeNote}\n            deleteNote={deleteNote}\n            selectNote={selectNote}\n            selectedNote={selectedNote}\n            categories={categories}\n            />\n        </ul>\n        <div className=\"list-notes-add\">\n          <a href=\"#\" onClick={addNote} className=\"feature-link\">\n            <FontAwesomeIcon icon={faPlusSquare} className=\"fa-link-icon\" />\n            Add note\n          </a>\n        </div>\n      </div>\n      <div className=\"note-column\">\n        <div className=\"note-title-bar\">\n          <div className=\"note-title-icon\" style={{ backgroundColor: (selectedNote !== null) ? findObjectInArray(findObjectInArray(selectedNote, notes).category, categories).color : \"white\" }}></div>\n          <div className=\"note-title-container\">\n            <h3>{(selectedNote !== null) ? findObjectInArray(selectedNote, notes).title : \"Select a note\"}</h3>\n            {(selectedNote !== null) ?\n              <p> edited <TimeAgo\n                  date={findObjectInArray(selectedNote, notes).modified}\n                  formatter={(value: number, unit: TimeAgo.Unit, suffix: TimeAgo.Suffix) => {\n                    if (unit === 'second') return 'just now';\n                    const plural: string = value !== 1 ? 's' : '';\n                    return `${value} ${unit}${plural} ${suffix}`;\n                  }}\n                />, on {findObjectInArray(selectedNote, notes).modified.toString()}</p>\n            :\n              <p>No note selected.</p>\n            }\n          </div>\n      </div>\n        <div className=\"note-contents\">\n\n          <NoteEditor\n            selectedNote={selectedNote}\n            notes={notes}\n            changeNote={changeNote}\n            />\n\n        </div>\n        <div className=\"note-controls\">\n          <a href=\"#\" className=\"feature-link\" onClick={(e) => changeNote(selectedNote, { editMode: true })}>\n            <FontAwesomeIcon icon={faPlusSquare} className=\"fa-link-icon\" />\n            Change title\n          </a>\n          <a href=\"#\" className=\"feature-link\" onClick={(e) => deleteNote(selectedNote)}>\n            <FontAwesomeIcon icon={faPlusSquare} className=\"fa-link-icon\" />\n            Delete note\n          </a>\n          <a href=\"#\" className=\"feature-link\" onClick={(e) => { if (selectedNote !== null) setCategorySetMode(true) }}>\n            <FontAwesomeIcon icon={faPlusSquare} className=\"fa-link-icon\" />\n            Change category\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.scss';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}