{"version":3,"sources":["utils/firebase.js","utils/databaseCalls.js","components/Category.js","Main.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","userKey","a","firestore","collection","doc","get","then","exists","console","log","data","catch","error","add","title","categories","notes","docRef","id","color","body","Category","category","changeCategory","deleteCategory","selectCategory","categoryRef","useRef","useEffect","editMode","current","focus","useColor","setColor","hex","selectedClass","selected","className","ref","placeholder","onInput","e","name","target","value","handleEdit","onKeyDown","key","blur","handleKeyDown","onBlur","handleExit","style","borderColor","backgroundColor","href","onClick","editColorMode","onOutsideClick","width","height","onChange","hideHSV","hideRGB","hideHEX","dark","Main","findObjectInArray","arrayOfObjects","find","object","findPositionInArray","map","indexOf","useState","userId","setUserId","selectedCategory","setSelectedCategory","colorEditMode","setCategories","React","categoryAllRef","selectedCategoryColor","setSelectedCategoryColor","created","modified","contents","searchString","retrieveLocalUser","Object","keys","length","databaseCalls","loadUser","createUser","newUserId","storeLocalUser","selectedClassAll","notebotUserStore","localStorage","setItem","JSON","stringify","parse","getItem","createEmptyCategory","newId","parseInt","emptyCategory","colors","Math","floor","random","generateColor","newProperties","originalCategory","newCategory","assign","newCategories","categoryPosition","splice","preventDefault","i","icon","faEdit","fixedWidth","faFill","faTrashAlt","faPlusSquare","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6336249.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDdCjbP7lQVb7--7uraYnkEdLGjWTmWckE\",\r\n  authDomain: \"notebot-42.firebaseapp.com\",\r\n  databaseURL: \"https://notebot-42.firebaseio.com\",\r\n  projectId: \"notebot-42\",\r\n  storageBucket: \"notebot-42.appspot.com\",\r\n  messagingSenderId: \"884273569921\",\r\n  appId: \"1:884273569921:web:e56bf1258d353e4ae02d80\",\r\n  measurementId: \"G-7B4K7B82XL\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics();\r\n\r\nexport default firebase;\r\n","import firebase from \"./firebase\";\r\n\r\n// databaseCalls: interface for calls to Firebase\r\n\r\n// ENDPOINTS\r\n\r\n/*\r\n\r\naddCategory\r\nremoveCategory\r\neditCategory\r\n\r\naddNote\r\nremoveNote\r\neditNote\r\n\r\n*/\r\n\r\nexport class databaseCalls {\r\n\r\n  async loadUser(userKey) {\r\n    firebase.firestore().collection(\"users\").doc(userKey).get().then((doc) => {\r\n        if (doc.exists) {\r\n            console.log(\"Document data:\", doc.data());\r\n        } else {\r\n            // doc.data() will be undefined in this case\r\n            console.log(\"No such document!\");\r\n        }\r\n    }).catch((error) => {\r\n        console.log(\"Error getting document:\", error);\r\n    });\r\n  }\r\n\r\n  async createUser() {\r\n    return firebase.firestore()\r\n      .collection(\"users\")\r\n      .add({\r\n        title: \"user\",\r\n        categories: [],\r\n        notes: []\r\n      }).then(function(docRef) {\r\n          return docRef.id;\r\n      });\r\n  }\r\n\r\n  createCategory(userKey) {\r\n    firebase.firestore()\r\n      .collection(\"users\").doc(userKey)\r\n      .collection(\"categories\")\r\n      .add({\r\n        title: \"category\",\r\n        color: \"#0f0\",\r\n      }).then(function(docRef) {\r\n          return docRef.id;\r\n      });\r\n\r\n\r\n    firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .add({\r\n      title: \"New Category\",\r\n      body: \"This is to check the Integration is working\"\r\n    });\r\n  }\r\n}\r\n\r\nexport default new databaseCalls();\r\n","import React, { useRef, useEffect } from 'react';\r\n\r\nimport { ColorPicker, useColor } from \"react-color-palette\";\r\nimport \"react-color-palette/lib/css/styles.css\";\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nconst Category = ({category, changeCategory, deleteCategory, selectCategory}) => {\r\n\r\n  // Make sure that the input element is focused when the category is in edit mode.\r\n  const categoryRef = useRef(null);\r\n  useEffect(() => {\r\n    if (category.editMode) {\r\n      categoryRef.current.focus();\r\n    }\r\n  }, [category.editMode]);\r\n\r\n  // Handle color changes for the Category.\r\n  const [color, setColor] = useColor(\"hex\", category.color);\r\n  // On app load, set the color to match the app state.\r\n  // On color picker update, set app state to reflect color.\r\n  useEffect(() => {\r\n    console.log(color);\r\n    changeCategory(category.id, { color: color.hex });\r\n  }, [color]);\r\n\r\n  // Handle any events that occur in edit mode.\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.target.blur();\r\n    }\r\n  }\r\n  const handleExit = (e) => {\r\n    // If the input is empty, delete the Category.\r\n    if (e.target.value === \"\") {\r\n      deleteCategory(category.id);\r\n    } else {\r\n      // If input is not empty, update the Category state.\r\n      changeCategory(category.id, { name: e.target.value, editMode: false });\r\n      // Select the newly edited category.\r\n      selectCategory(category.id);\r\n    }\r\n  }\r\n  const handleEdit = (e) => {\r\n    changeCategory(category.id, { name: e.target.value });\r\n  }\r\n\r\n  // Handle any events that occur in normal mode (as an anchor).\r\n  const handleClick = (e) => {\r\n    selectCategory(category.id);\r\n  }\r\n\r\n  // Handle the user clicking outside of the color picker, effectively ending the selection.\r\n  const handleOutsideColorClick = (e) => {\r\n    changeCategory(category.id, { editColorMode: false });\r\n  }\r\n\r\n  // Append a selected class if this category is selected.\r\n  let selectedClass;\r\n  if (category.selected) {\r\n    selectedClass = \" selected\";\r\n  } else {\r\n    selectedClass = \"\";\r\n  }\r\n\r\n  if (category.editMode) {\r\n    return (\r\n      <li className=\"category-item-linkMode\">\r\n        <input\r\n          id={\"category-\" + category.id}\r\n          ref={categoryRef}\r\n          placeholder=\"Enter a category title.\"\r\n          onInput={(e) => handleEdit(e)}\r\n          onKeyDown={(e) => handleKeyDown(e)}\r\n          onBlur={(e) => handleExit(e)}\r\n          value={category.name}\r\n          />\r\n      </li>\r\n    );\r\n  } else {\r\n    return (\r\n      <li className=\"category-item-linkMode\">\r\n        <a\r\n          id={\"category-\" + category.id}\r\n          ref={categoryRef}\r\n          className={selectedClass}\r\n          style={{ color: category.color, borderColor: category.color, backgroundColor: category.color }}\r\n          href=\"#\"\r\n          onClick={(e) => handleClick(e)}>\r\n            {category.name}\r\n        </a>\r\n        {category.editColorMode > 0 &&\r\n          <OutsideClickHandler\r\n            onOutsideClick={handleOutsideColorClick}>\r\n            <div className=\"category-colorPicker\">\r\n              <ColorPicker width={300} height={100} color={color} onChange={setColor} hideHSV hideRGB hideHEX dark />\r\n            </div>\r\n        </OutsideClickHandler>\r\n        }\r\n      </li>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default Category;\r\n","import React, { useState, createRef, useRef } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit, faFill, faTrashAlt, faPlusSquare } from '@fortawesome/free-solid-svg-icons'\n\n// My utilities\nimport firebase from \"./utils/firebase\";\nimport databaseCalls from \"./utils/databaseCalls\";\n\n// My components\nimport Category from './components/Category';\nimport Note from './components/Note';\n\n// MAIN APPLICATION\nconst Main = () => {\n\n  // ** UTILS\n  // Generates a new id number based on the last value found in the array plus one.\n  const generateId = (arrayOfObjects) => {\n    if (arrayOfObjects.length > 0) {\n      return parseInt(arrayOfObjects[arrayOfObjects.length - 1].id) + 1;\n    } else {\n      return 0;\n    }\n  }\n  // Generates a random hex code from a list.\n  const generateColor = () => {\n    const colors = [\"#91aaff\", \"#ff9e9e\", \"#ff80c5\", \"#7afbff\", \"#8aff9c\"];\n    return colors[Math.floor(Math.random()*colors.length)];\n  }\n  // Finds the object with the given id within the array.\n  const findObjectInArray = (id, arrayOfObjects) => {\n    return arrayOfObjects.find(object => object.id === id);\n  }\n  // Finds the position of the object with the given id within the array.\n  const findPositionInArray = (id, arrayOfObjects) => {\n    return arrayOfObjects.map(function(object) {return object.id; }).indexOf(id);\n  }\n\n  // * STATE\n  // Since this is a relatively simple app, all of the state is stored here.\n\n  // Stores the id of the user.\n  const [userId, setUserId] = useState(null);\n\n  // Stores the currently selected category that is highlighted and who's notes are being displayed.\n  const [selectedCategory, setSelectedCategory] = useState(-1);\n\n  // Stores the categories associated with the user.\n  const [categories, setCategories] = useState(\n    [\n      {\n        id: 0,\n        name: 'Personal',\n        color: '#00ff84',\n        editMode: false,\n        colorEditMode: false,\n        selected: false\n      },\n      {\n        id: 1,\n        name: 'Work',\n        color: '#ffb322',\n        editMode: false,\n        colorEditMode: false,\n        selected: false\n      },\n      {\n        id: 2,\n        name: 'Miscellaneous',\n        color: '#16ecff',\n        editMode: false,\n        colorEditMode: false,\n        selected: false\n      }\n    ]\n  );\n  React.useEffect(() => {\n    // Filter the displayed notes to only those within the selected Category.\n    // If the selected note is not \"all\"...\n    if (selectedCategory !== -1) {\n      // Filter logic\n    }\n\n    // Submit the change to Firebase.\n  }, [categories]);\n  // Stores the ref to the all category which is not a true category and cannot be deleted.\n  const categoryAllRef = useRef(null);\n\n  // Set the theme color of the category editor box and its contents.\n  const [selectedCategoryColor, setSelectedCategoryColor] = useState(\"white\");\n  React.useEffect(() => {\n    if (selectedCategory !== -1) {\n      setSelectedCategoryColor(findObjectInArray(selectedCategory, categories).color);\n    } else {\n      setSelectedCategoryColor(\"white\");\n    }\n  }, [selectedCategory, categories]);\n\n  // Stores the currently selected note that is being edited in the main panel.\n  const [selectedNote, setSelectedNote] = useState(null);\n  // Stores the notes associated with the user.\n  const [notes, setNotes] = useState(\n    [\n      {\n        id: 0,\n        title: 'Title of a note',\n        category: 0,\n        created: 'Date',\n        modified: 'Date',\n        contents: 'Contents of a note.'\n      },\n    ]\n  );\n\n\n  const [searchString, setSearchString] = useState(\"\");\n  React.useEffect(() => {\n    // Filter the\n  }, [searchString]);\n\n  // * EFFECTS\n\n  // Initializion for the app.\n  // This loads the user data or creates a new one if they do not exist.\n  React.useEffect(() => {\n    // Try to retrieve the user from localStorage, if it exists.\n    let userId = retrieveLocalUser();\n    if (userId && Object.keys(userId).length !== 0) {\n      // If user exists, then make a call to get the user's notes.\n      databaseCalls.loadUser(userId.userId);\n      // Save the user in the state.\n      setUserId(userId.userId);\n    } else {\n      // If user does not exist, then make a call to create the user on Firebase.\n      databaseCalls.createUser().then((newUserId) => {\n        // Save the new user in the state.\n        setUserId(newUserId);\n        // Save the user Id in localStorage.\n        storeLocalUser();\n      });\n    }\n  }, []);\n\n  React.useEffect(() => {\n    console.log(categories);\n  });\n\n  // * FUNCTIONS\n\n  // ** LOCAL STORAGE\n  // Store and retrieve the user id from local storage, if the user refreshes the page.\n  const storeLocalUser = () => {\n    const notebotUserStore = userId;\n    localStorage.setItem('notebotUserStore', JSON.stringify(notebotUserStore));\n  }\n  const retrieveLocalUser = () => {\n    const notebotUserStore = JSON.parse(localStorage.getItem('notebotUserStore'));\n    return notebotUserStore;\n  }\n\n  // ** CATEGORIES\n\n  // Create a new empty category (a bucket for notes).\n  const createEmptyCategory = () => {\n    const newId = generateId(categories);\n    const newColor = generateColor();\n    const emptyCategory = {\n      id: newId,\n      name: '',\n      color: newColor, // replace with random bright color\n      editMode: true,\n      colorEditMode: false,\n      selected: false\n    };\n    setCategories(categories  => [...categories, emptyCategory]);\n    return newId;\n  }\n  // Trigger the process to add a new category.\n  const addCategory = () => {\n    const categoryId = createEmptyCategory();\n  }\n\n  // Change category to the details provided in the input object.\n  // Expect input object to look like { key: newValue, ... }\n  const changeCategory = (id, newProperties) => {\n    console.log(id, newProperties)\n    // Find the object with the relevant id.\n    let originalCategory = findObjectInArray(id, categories);\n    // Replace any values within it with the submitted properties.\n    let newCategory = Object.assign(originalCategory, newProperties);\n\n    // Construct a new array to replace the state.\n    let newCategories = [...categories];\n    let categoryPosition = findPositionInArray(id, categories);\n    newCategories[categoryPosition] = newCategory;\n    setCategories(newCategories);\n  }\n\n  const editCategoryTitleClick = (e) => {\n    e.preventDefault();\n    // Set the target category into edit mode, unless it is the all category.\n    if (selectedCategory !== -1) {\n      changeCategory(selectedCategory, { editMode: true, editColorMode: false });\n    }\n  }\n\n  const editCategoryColorClick = (e) => {\n    e.preventDefault();\n    // Set the target category into edit mode, unless it is the all category.\n    if (selectedCategory !== -1) {\n      changeCategory(selectedCategory, { editMode: false, editColorMode: true });\n    }\n  }\n\n  // Causes the category with the given id to be set to selected within the state.\n  const selectCategory = (id) => {\n    // Find the old selected category and make its selected property false.\n    if (selectedCategory !== -1) {\n      changeCategory(selectedCategory, { selected: false });\n    }\n\n    // Set the id of the selected category.\n    setSelectedCategory(id);\n\n    if (id === -1) {\n      // If we are selecting the all category, which is not a true category...\n      // Don't change any categories. Instead, use the all ref to set selected on the all link. TODO\n    } else {\n      // If we are selecting a normal category...\n      // Find the object and set its selected to true.\n      changeCategory(id, { selected: true });\n    }\n  }\n\n  // Deletes a category based on id.\n  const deleteCategory = (id) => {\n    // Create new categories array with the object removed.\n    let newCategories = [...categories];\n    let categoryPosition = findPositionInArray(id, categories);\n    newCategories.splice(categoryPosition, 1);\n    setCategories(newCategories);\n\n    // Reset selected category to \"all\".\n    setSelectedCategory(-1);\n  }\n\n  // Handles click of delete category.\n  const deleteCategoryClick = (e) => {\n    e.preventDefault();\n    // Delete the currently selected category, unless it is the all category.\n    if (selectedCategory !== -1) {\n      deleteCategory(selectedCategory);\n    }\n  }\n\n  // Handles the click of the \"all\" category which displays all notes.\n  const allCategoryClick = (e) => {\n    e.preventDefault();\n    selectCategory(-1);\n  }\n\n  // RENDER\n\n  // Append a selected class to all if all is selected.\n  let selectedClassAll;\n  if (selectedCategory === -1) {\n    selectedClassAll = \" selected\";\n  } else {\n    selectedClassAll = \"\";\n  }\n\n  // Main app view.\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-column\">\n        <div className=\"main-logo\">\n          <div className=\"box-logo\"></div>\n          <h1>Notebot</h1>\n        </div>\n        <div className=\"main-categories\">\n\n          <ul className=\"main-categories-list\">\n            <li>\n              <a\n                id=\"category-all\"\n                ref={categoryAllRef}\n                href=\"#\"\n                className={\"category-all \" + selectedClassAll}\n                onClick={allCategoryClick}>\n                  All Notes\n              </a>\n            </li>\n            {categories.map((category, i) => (<Category\n                category={category}\n                changeCategory={changeCategory}\n                deleteCategory = {deleteCategory}\n                selectCategory = {selectCategory}\n              />)\n            )}\n          </ul>\n\n          <div style={{ borderColor: selectedCategoryColor }} className=\"main-categories-controls\">\n            <a href=\"#\" onClick={editCategoryTitleClick}>\n              <FontAwesomeIcon icon={faEdit} color={selectedCategoryColor} className=\"fa-link-icon\" fixedWidth  />\n              Edit title\n            </a>\n            <a href=\"#\" onClick={editCategoryColorClick}>\n              <FontAwesomeIcon icon={faFill} color={selectedCategoryColor} className=\"fa-link-icon\" fixedWidth  />\n              Edit color\n            </a>\n            <a href=\"#\" onClick={deleteCategoryClick}>\n              <FontAwesomeIcon icon={faTrashAlt} color={selectedCategoryColor} className=\"fa-link-icon\" fixedWidth  />\n              Delete category\n            </a>\n          </div>\n\n          <div className=\"main-categories-add\">\n            <a href=\"#\" onClick={addCategory}>\n              <FontAwesomeIcon icon={faPlusSquare} className=\"fa-link-icon\" />\n              Add category\n            </a>\n          </div>\n\n        </div>\n      </div>\n      <div className=\"list-column\">\n        <ul>\n        </ul>\n        <div className=\"note-controls\">\n        </div>\n      </div>\n      <div className=\"note-column\">\n        <div className=\"note-title-bar\"></div>\n        <div className=\"note-contents\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.scss';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}